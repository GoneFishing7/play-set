{"version":3,"sources":["logic/CardProps.ts","ui/Card.tsx","ui/Board.tsx","logic/Card.ts","logic/GameLogic.ts","logic/Board.ts","ui/Button.tsx","ui/Controls.tsx","ui/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CardPropsKeys","CardColorEnum","CardSymbolEnum","CardShadingEnum","CardNumberEnum","generateSymbol","co","sy","sh","fill","d","stroke","strokeWidth","rx","ry","y","x","height","width","Card","props","cardProperties","color","symbol","shading","number","classes","selected","push","isHint","className","onClick","viewBox","preserveAspectRatio","join","Object","values","map","id","patternUnits","key","transform","Board","cardTable","_","chunk","cards","row","rowIndex","card","cardIndex","toObject","onCardClick","selectedCards","includes","hintedCards","this","sample","getAllEnumKeys","isSet","cardsAsObjects","c","property","uniqBy","length","findSets","sets","cardAIndex","cardBIndex","cardCIndex","numCards","minSets","Error","i","some","index","indexes","newCards","isEqual","shuffle","shouldShuffle","Button","largeButton","roundedLeft","roundedRight","roundedNone","staticOnHover","position","children","Controls","giveHint","role","aria-label","score","Game","handleCardClick","setState","prevState","filter","a","state","checkSet","shuffleCards","board","cloneDeep","getCard","nextBoard","replaceCards","slice","getCards","console","log","React","Component","App","useState","isDark","toggleDark","checked","onChange","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9a104482.chunk.js","sourcesContent":["export interface CardProps {\n  color: CardColor;\n  symbol: CardSymbol;\n  shading: CardShading;\n  number: CardNumber;\n}\n\nexport type Triple<T> = [T, T, T];\n\nexport enum CardPropsKeys {\n  color,\n  symbol,\n  shading,\n  number,\n}\n\nexport enum CardColorEnum {\n  red,\n  purple,\n  green,\n}\nexport type CardColor = keyof typeof CardColorEnum;\nexport enum CardSymbolEnum {\n  squiggle,\n  diamond,\n  oval,\n}\nexport type CardSymbol = keyof typeof CardSymbolEnum;\nexport enum CardShadingEnum {\n  full,\n  half,\n  empty,\n}\nexport type CardShading = keyof typeof CardShadingEnum;\nexport enum CardNumberEnum {\n  one,\n  two,\n  three,\n}\nexport type CardNumber = keyof typeof CardNumberEnum;\n","import React from \"react\";\nimport {\n  CardSymbol,\n  CardProps,\n  CardShading,\n  CardColor,\n  CardColorEnum,\n} from \"../logic/CardProps\";\nimport \"./styles/Card.scss\";\n\ninterface Props {\n  cardProperties: CardProps;\n  onClick?: () => void;\n  selected?: boolean;\n  isHint?: boolean;\n}\n\nconst Card = (props: Props) => {\n  let { color, symbol, shading, number } = props.cardProperties;\n  let classes = [\"card\"];\n  if (props.selected) {\n    classes.push(\"selected\");\n  }\n  if (props.isHint) {\n    classes.push(\"hint\");\n  }\n  return (\n    <button className=\"card-wrapper\" onClick={props.onClick}>\n      <svg\n        viewBox=\"0 0 150 100\"\n        preserveAspectRatio=\"xMidYMid meet\"\n        className={classes.join(\" \")}\n      >\n        <defs>\n          {Object.values(CardColorEnum).map((co) => (\n            <pattern\n              id={`${co}half`}\n              x=\"0\"\n              y=\"0\"\n              width=\"10\"\n              height=\"4\"\n              patternUnits=\"userSpaceOnUse\"\n              key={`${co}half`}\n            >\n              {/* \n                // @ts-ignore */}\n              <rect width=\"10\" height=\"1\" stroke={co} />\n            </pattern>\n          ))}\n          {Object.values(CardColorEnum).map((co) => (\n            <pattern\n              id={`${co}full`}\n              x=\"0\"\n              y=\"0\"\n              width=\"1\"\n              height=\"1\"\n              patternUnits=\"userSpaceOnUse\"\n              key={`${co}full`}\n            >\n              {/* \n                // @ts-ignore */}\n              <rect width=\"1\" height=\"1\" stroke={co} />\n            </pattern>\n          ))}\n        </defs>\n        <g\n          transform={`translate(${\n            number === \"one\" ? \"0\" : number === \"two\" ? \"-20\" : \"-40\"\n          }, 0)`}\n        >\n          {generateSymbol(color, symbol, shading)}\n        </g>\n        {number !== \"one\" && (\n          <g transform={`translate(${number === \"two\" ? \"20\" : \"0\"}, 0)`}>\n            {generateSymbol(color, symbol, shading)}\n          </g>\n        )}\n        {number === \"three\" && (\n          <g transform={`translate(40, 0)`}>\n            {generateSymbol(color, symbol, shading)}\n          </g>\n        )}\n      </svg>\n    </button>\n  );\n};\n\n/**\n * Generate a jsx svg for the given SET symbol\n * @param co The color of the card\n * @param sy The shape/symbol of the card\n * @param sh The shading for each symbol\n */\nconst generateSymbol = (co: CardColor, sy: CardSymbol, sh: CardShading) => {\n  const strokeWidth = 2;\n  const fill = `url(#${co}${sh})`;\n  if (sy === \"squiggle\") {\n    // Squiggle\n    return (\n      <path\n        d=\"M 65.667943,34.045303 C 87.27875,39.803809 41.990889,59.441302 72.173537,76.913458 87.083275,85.880228 96.329278,73.074631 84.85121,66.826656 81.5896,65.05123 76.227993,61.395792 81.063786,56.824618 95.230412,32.999185 83.571571,25.755302 78.51794,21.476024 65.084059,15.753205 52.27903,28.108168 65.667943,34.045303 Z\"\n        fill={fill}\n        stroke={co}\n        strokeWidth={strokeWidth}\n      />\n    );\n  } else if (sy === \"diamond\") {\n    // Diamond\n    return (\n      <path\n        d=\"M 75,20 60,50 75,80 90,50 Z\"\n        fill={fill}\n        stroke={co}\n        strokeWidth={strokeWidth}\n      />\n    );\n  } else {\n    // Oval\n    return (\n      <rect\n        rx=\"20\"\n        ry=\"15.24699\"\n        y=\"20\"\n        x=\"60\"\n        height=\"60\"\n        width=\"30\"\n        fill={fill}\n        stroke={co}\n        strokeWidth={strokeWidth}\n      />\n    );\n  }\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../logic/Card\";\nimport CardComponent from \"./Card\";\nimport \"./styles/Board.scss\";\nimport _ from \"lodash\";\n\ninterface Props {\n  cards: Card[];\n  selectedCards: number[]; // Indexes\n  hintedCards: number[]; // Indexes\n  onCardClick: (index: number) => void;\n}\n\nconst Board = (props: Props) => {\n  const cardTable = _.chunk(props.cards, 3);\n  return (\n    <table id=\"board\">\n      <tbody>\n        {cardTable.map((row: Card[], rowIndex: number) => (\n          <tr key={rowIndex} className=\"boardRow\">\n            {row.map((card: Card, cardIndex: number) => (\n              <td key={cardIndex} className=\"boardCell\">\n                <CardComponent\n                  cardProperties={card.toObject()}\n                  onClick={() => {\n                    props.onCardClick(rowIndex * 3 + cardIndex);\n                  }}\n                  selected={props.selectedCards.includes(\n                    rowIndex * 3 + cardIndex\n                  )}\n                  isHint={props.hintedCards.includes(rowIndex * 3 + cardIndex)}\n                />\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Board;\n","import {\n  CardColor,\n  CardNumber,\n  CardShading,\n  CardSymbol,\n  CardColorEnum,\n  CardSymbolEnum,\n  CardShadingEnum,\n  CardNumberEnum,\n} from \"./CardProps\";\nimport _ from \"lodash\";\nimport { getAllEnumKeys } from \"enum-for\";\n\nexport default class Card {\n  /**\n   * The color of the card\n   *\n   * @type {CardColor}\n   * @memberof Card\n   */\n  color: CardColor;\n\n  /**\n   * The card's symbol\n   *\n   * @type {CardSymbol}\n   * @memberof Card\n   */\n  symbol: CardSymbol;\n\n  /**\n   * The shading of the card\n   *\n   * @type {CardShading}\n   * @memberof Card\n   */\n  shading: CardShading;\n\n  /**\n   * The number of symbols in the card./\n   *\n   * @type {CardNumber}\n   * @memberof Card\n   */\n  number: CardNumber;\n\n  /**\n   * Generate a new card.\n   * @param {CardColor} [color] The color\n   * @param {CardSymbol} [symbol] The symbol\n   * @param {CardShading} [shading] The shading\n   * @param {CardNumber} [number] The number\n   * @memberof Card\n   */\n  constructor(\n    color?: CardColor,\n    symbol?: CardSymbol,\n    shading?: CardShading,\n    number?: CardNumber\n  ) {\n    if (!color || !symbol || !shading || !number) {\n      // @ts-ignore\n      this.color = _.sample(getAllEnumKeys(CardColorEnum));\n      //@ts-ignore\n      this.symbol = _.sample(getAllEnumKeys(CardSymbolEnum));\n      //@ts-ignore\n      this.shading = _.sample(getAllEnumKeys(CardShadingEnum));\n      //@ts-ignore\n      this.number = _.sample(getAllEnumKeys(CardNumberEnum));\n    } else {\n      this.color = color;\n      this.symbol = symbol;\n      this.shading = shading;\n      this.number = number;\n    }\n  }\n\n  /**\n   * Card to object\n   *\n   * @returns The card as an object\n   * @memberof Card\n   */\n  toObject() {\n    return {\n      color: this.color,\n      symbol: this.symbol,\n      shading: this.shading,\n      number: this.number,\n    };\n  }\n}\n","import Card from \"./Card\";\nimport _ from \"lodash\";\nimport { getAllEnumKeys } from \"enum-for\";\nimport { CardPropsKeys, Triple } from \"./CardProps\";\n\n/**\n * Check if three cards are a valid set\n *\n * @export\n * @param {Triple<Card>} cards The three cards\n * @returns {boolean} Whether the cards make up a set.\n */\nexport function isSet(cards: Triple<Card>): boolean {\n  let cardsAsObjects = cards.map((c) => c.toObject());\n  for (const property of getAllEnumKeys(CardPropsKeys)) {\n    // There will be one or three of each type for each property\n    if (_.uniqBy(cardsAsObjects, property).length === 2) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Find the sets from an array of cards\n *\n * @export\n * @param {Card[]} cards The cards\n * @returns {Triple<number>[]} An array of the sets found, or if no sets found, an empty array.\n */\nexport function findSets(cards: Card[]): Triple<number>[] {\n  let sets: Triple<number>[] = [];\n  for (let cardAIndex = 0; cardAIndex < cards.length - 2; cardAIndex++) {\n    for (\n      let cardBIndex = cardAIndex + 1;\n      cardBIndex < cards.length - 1;\n      cardBIndex++\n    ) {\n      for (\n        let cardCIndex = cardBIndex + 1;\n        cardCIndex < cards.length;\n        cardCIndex++\n      ) {\n        const cardA = cards[cardAIndex];\n        const cardB = cards[cardBIndex];\n        const cardC = cards[cardCIndex];\n        if (isSet([cardA, cardB, cardC])) {\n          sets.push([cardAIndex, cardBIndex, cardCIndex]);\n        }\n      }\n    }\n  }\n  return sets;\n}\n","import _ from \"lodash\";\nimport Card from \"./Card\";\nimport {\n  CardColorEnum,\n  CardSymbolEnum,\n  CardShadingEnum,\n  CardNumberEnum,\n  Triple,\n} from \"./CardProps\";\nimport { getAllEnumKeys } from \"enum-for\";\nimport { findSets } from \"./GameLogic\";\n\nexport default class Board {\n  /**\n   * The minimum number of sets\n   * @memberof Board\n   */\n  minSets: number;\n\n  /**\n   * The cards in the board\n   * @memberof Board\n   */\n  cards: Card[];\n\n  /**\n   * Board constructs a random board\n   * @param {number} [numCards=12] The number of cards in the board\n   * @memberof Board\n   */\n  constructor(numCards = 12, minSets = 1) {\n    if (numCards < 3) {\n      throw new Error(\"Attempted to create a board of size < 3\");\n    }\n    this.cards = [];\n    this.minSets = minSets;\n    do {\n      this.cards = [];\n      for (let i = 0; i < numCards; i++) {\n        let card;\n        do {\n          card = new Card();\n        } while (_.some(this.cards, card));\n        this.cards.push(card);\n      }\n    } while (findSets(this.cards).length < this.minSets);\n  }\n\n  /**\n   * Get the cards from the board\n   *\n   * @returns The cards\n   * @memberof Board\n   */\n  getCards(): Card[] {\n    return this.cards;\n  }\n\n  /**\n   * Sets a card of the board to `card`\n   *\n   * @param {Card} card The new card\n   * @param {number} index The index to replace it at\n   * @memberof Board\n   */\n  setCard(card: Card, index: number): void {\n    this.cards[index] = card;\n  }\n\n  /**\n   * The card to get from the board\n   *\n   * @param {number} i The index of the card\n   * @returns The card at the index\n   * @memberof Board\n   */\n  getCard(i: number): Card {\n    return this.cards[i];\n  }\n\n  /**\n   * Replace the cards at three indexes,\n   * ensuring that there is still a set.\n   *\n   * @param {Triple<number>} indexes The indexes of each card to replace\n   * @memberof Board\n   */\n  replaceCards(indexes: Triple<number>): void {\n    let newCards: Triple<Card>;\n    do {\n      do {\n        newCards = [new Card(), new Card(), new Card()];\n      } while (\n        _.some(this.cards, newCards[0]) ||\n        _.some(this.cards, newCards[1]) ||\n        _.some(this.cards, newCards[2]) ||\n        _.isEqual(newCards[0], newCards[1]) ||\n        _.isEqual(newCards[0], newCards[2]) ||\n        _.isEqual(newCards[1], newCards[2])\n      );\n      for (let i = 0; i < 3; i++) {\n        this.cards[indexes[i]] = newCards[i];\n      }\n    } while (findSets(this.cards).length < this.minSets);\n  }\n\n  /**\n   * Shuffle the cards in place.\n   * @returns The shuffled cards\n   */\n  shuffle() {\n    this.cards = _.shuffle(this.cards);\n    return this;\n  }\n\n  /**\n   * Generate a full 81-card deck\n   *\n   * @static\n   * @param {boolean} [shouldShuffle=true] Deck should be shuffled\n   * @returns The deck\n   * @memberof Board\n   */\n  static generateDeck(shouldShuffle = true): Card[] {\n    let cards: Card[] = [];\n    for (let color of getAllEnumKeys(CardColorEnum)) {\n      for (let symbol of getAllEnumKeys(CardSymbolEnum)) {\n        for (let shading of getAllEnumKeys(CardShadingEnum)) {\n          for (let number of getAllEnumKeys(CardNumberEnum)) {\n            // @ts-ignore\n            cards.push(new Card(color, symbol, shading, number));\n          }\n        }\n      }\n    }\n    if (shouldShuffle) {\n      _.shuffle(cards);\n    }\n    return cards;\n  }\n}\n","import React from \"react\";\nimport \"./styles/Button.scss\";\n\ninterface Props {\n  onClick?: () => void;\n  color?: string;\n  largeButton?: boolean;\n  roundedLeft?: boolean;\n  roundedRight?: boolean;\n  roundedNone?: boolean;\n  staticOnHover?: boolean;\n  position?: string;\n}\n\nconst Button = (props: React.PropsWithChildren<Props>) => {\n  const classes = [\"button\"];\n  if (props.color) {\n    classes.push(\"button-\" + props.color);\n  } else {\n    classes.push(\"button-gray\");\n  }\n  if (props.largeButton) {\n    classes.push(\"button-large\");\n  }\n  if (props.roundedLeft) {\n    classes.push(\"button-rounded-left\");\n  }\n  if (props.roundedRight) {\n    classes.push(\"button-rounded-right\");\n  }\n  if (props.roundedNone) {\n    classes.push(\"button-rounded-none\");\n  }\n  if (props.staticOnHover) {\n    classes.push(\"button-static\");\n  }\n  if (props.position) {\n    classes.push(props.position);\n  }\n  return (\n    <button onClick={props.onClick} className={classes.join(\" \")}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport Button from \"./Button\";\nimport \"./styles/Controls.scss\";\n\ninterface Props {\n  giveHint: () => void;\n  shuffle: () => void;\n  score: number;\n}\n\nconst Controls = (props: Props) => {\n  return (\n    <div id=\"controls\">\n      <div id=\"hint-button\">\n        <Button color=\"blue\" onClick={props.giveHint}>\n          <span role=\"img\" aria-label=\"emoji\">\n            🤷‍♂️\n          </span>{\" \"}\n          Hint\n        </Button>\n      </div>\n      <div id=\"shuffle-button\">\n        <Button color=\"blue\" onClick={props.shuffle}>\n          <span role=\"img\" aria-label=\"emoji\">\n            🙃\n          </span>{\" \"}\n          Shuffle\n        </Button>\n      </div>\n      <h2 id=\"score\">Your score: {props.score}</h2>\n    </div>\n  );\n};\n\nexport default Controls;\n","import React from \"react\";\nimport BoardComponent from \"./Board\";\nimport Board from \"../logic/Board\";\nimport Controls from \"./Controls\";\n\nimport \"./styles/Game.scss\";\nimport { isSet, findSets } from \"../logic/GameLogic\";\nimport _ from \"lodash\";\nimport { Triple } from \"../logic/CardProps\";\n\ninterface Props {}\ninterface State {\n  board: Board;\n  score: number;\n  selectedCards: number[];\n  sets: Triple<number>[];\n  hintedCards: number[];\n}\n\nclass Game extends React.Component<Props, State> {\n  constructor(props: Readonly<Props>) {\n    super(props);\n    const board = new Board(12, 2);\n    this.state = {\n      board,\n      score: 0,\n      selectedCards: [],\n      sets: findSets(board.getCards()),\n      hintedCards: [],\n    };\n  }\n  render() {\n    console.log(this.state.sets);\n    return (\n      <div id=\"game\">\n        <div id=\"title-wrapper\">\n          <h1 id=\"title\">Set</h1>\n        </div>\n        <div id=\"board-wrapper\">\n          <BoardComponent\n            cards={this.state.board.getCards()}\n            selectedCards={this.state.selectedCards}\n            hintedCards={this.state.hintedCards}\n            onCardClick={this.handleCardClick}\n          />\n        </div>\n        <div id=\"controls-wrapper\">\n          <Controls\n            giveHint={() => {\n              this.giveHint();\n            }}\n            shuffle={() => {\n              this.shuffleCards();\n            }}\n            score={this.state.score}\n          />\n        </div>\n      </div>\n    );\n  }\n  handleCardClick = (index: number) => {\n    this.setState(\n      (prevState) => {\n        if (prevState.selectedCards.includes(index)) {\n          return {\n            selectedCards: prevState.selectedCards.filter((a) => a !== index),\n          };\n        } else if (prevState.selectedCards.length === 3) {\n          return {\n            selectedCards: prevState.selectedCards,\n          };\n        }\n        return {\n          selectedCards: [...prevState.selectedCards, index],\n        };\n      },\n      () => {\n        if (this.state.selectedCards.length === 3) {\n          this.checkSet();\n        }\n      }\n    );\n  };\n  shuffleCards = () => {\n    this.setState((prevState) => {\n      return {\n        board: _.cloneDeep(prevState.board).shuffle(),\n      };\n    });\n  };\n  checkSet = () => {\n    if (this.state.selectedCards.length !== 3) {\n      throw new Error(\"Something bad happened!\");\n    }\n    const setIsValid = isSet([\n      this.state.board.getCard(this.state.selectedCards[0]),\n      this.state.board.getCard(this.state.selectedCards[1]),\n      this.state.board.getCard(this.state.selectedCards[2]),\n    ]);\n    if (setIsValid) {\n      this.setState((prevState) => {\n        const nextBoard = _.cloneDeep(prevState.board);\n        nextBoard.replaceCards(\n          //@ts-ignore\n          this.state.selectedCards.slice(0, 3)\n        );\n        return {\n          score: prevState.score + 1,\n          selectedCards: [],\n          board: nextBoard,\n          sets: findSets(nextBoard.getCards()),\n          hintedCards: [],\n        };\n      });\n    }\n  };\n  giveHint = () => {\n    // TODO: Verify that there are sets\n    this.setState((prevState) => {\n      if (prevState.hintedCards.length > 2) {\n        return {\n          hintedCards: prevState.hintedCards,\n        };\n      }\n      return {\n        hintedCards: [\n          ...prevState.hintedCards,\n          prevState.sets[0][prevState.hintedCards.length],\n        ],\n      };\n    });\n  };\n}\n\nexport default Game;\n","import React, { useState } from \"react\";\nimport Game from \"./ui/Game\";\nimport \"./App.scss\";\nimport DarkModeToggle from \"react-dark-mode-toggle\";\n\nfunction App() {\n  const [isDark, toggleDark] = useState(() => false);\n  return (\n    <div id=\"app\" className={isDark ? \"dark\" : \"light\"}>\n      <Game />\n      <div className=\"dark-mode-toggle-wrapper\">\n        <DarkModeToggle checked={isDark} onChange={toggleDark} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n//import \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}